7 更多信息［More Information］
7.1 当前环境下的SQL统计信息
7.1.1 Top10-按总执行时间降序
当前WDR报告支持按总执行时间降序直接查看结果，在SQLStatistics主题下选择SQLordered by Elapsed Time，即可获得按总执行时间排序的结果，当前夜间高峰期 top 10的SQL语句（对于在不同CN上执行的id不同但结构相同的SQL当前已做了归并）具体如下：
SQL语句
select＂FROM nettoll.n11_trans_splitdetails where trans_time > to_timestamp（S1，?） and trans_time < to_timestamp（S2，?） and pass_id =any（ARRAY［S3，S4，S5，S6，S7，S8，S9，S10，S11，S12，S13，S14，S15，$16，$17，S18，S19，$20，$21，S22.
S23. S24. S25. $26. S27. S28. S29. S30， $31. S32］）
select from nettoll.105_trans_exit_etc where mid=S1 and gid=S2 and pass_id=S3
select id， version， clear_type， service_provider_id， issuer_id， message_id， toll_province_id， receive_time， trans_id， fee. discount_fee， media_type， obu_sign， media_no， en_toll_lane_id， en_time， ex_toll_lane_id， en_vehicle_id， en_vehicle_color. ex_vehicle_id， ex_vehicle_color， identify_vehicle_id， identify_vehicle_color， en_vehicle_type， ex_vehicle_type， vehicle_class，
en_toll_station_name， ex_toll_station_name， etc_card_id， terminal_trans_no， trans_type_code， trans_type， terminal_no.
algorithm_identifier， service_type， pay_type， identification， description， special_type， vehicle_sign_id， pass_id， account_status，
disputed_reason， toll_intervals_group， charge_fee_group， process_date， last_process_time， branch_shiftindex.
center_shiftindex， split_flag， create_time， dispute_result， file_id， ex_time， trans_pay_type， etc_card_type， en_toll_lane_hex
account_time， split_time， toll_support， ex_weight， axle_count， en_weight， en_axle_count， vehicle_sign， no_card_
注：本条SQL因过长统计时被截断，可通过修改 guc 参数track_activity_query_size增加最长记录字符数
进行解决
如需修改，可联系xx工程师指导操作
select （toll rold_id ll num ll direction IIreserved_num）as tolllntervalld， toll_rold_id， num， direction， reserved_num， type， length，
start ＿lat， start_Ing. start_stake_num， end_stake_num， endt_lat， endt_Ing， toll_roads， province_type， end time， version，
operation， send_flag， created， name from a36_toll_interval_info where （toll_rold_id ll num ll direction reserved_num）=$1 文档版本01（2021/09/17）
select mid, gid, pass id, trans time, unit id. plaza id, shift begin _time, lane_id, operator_id, ac_when, shift_id, issuer_id.
exit_flag. prov fee, toll intervals group, carlicense, en_toll_lane_hex, check_result, update_time, create_time, mid_group.
status, amount, balance_amount, count, trans_type. pass_id_group, trade_id_group from nettoll.p19_gantry_unmerged_cpc
WHERE trans_time > to_date($1, AND trans _time now()- S2 : interval AND date part(?,trans time)>= S3 AND
date part(?,trans _time)< $4 AND status S5 AND check result S6 limit S7
SELECT ROW_NUMBERO OVER(PARTITION BY t1. pass_id ORDER BY t1.trans_time, t1.end_flag ASC )as
"partition_order_no", t1.mid, t1.trans type code, t1.issuer_id, t1.gid, t1.center_id, t1.end_flag, t1.trans_time, t1.province_fee, t1.exit_type, t1.pass_id, t1.create_time, t1.exit_fee_type, t2." FROM p17_gantry_temp_cpc t1 LEFT JOIN 108_trans_gantry_cpc
t2 ON t1.mid t2.mid AND t1.center_id t2.center_id WHERE t1.trans _time > to _timestamp(S1,?) AND t1.pass_id=$2
ORDER BY t1.trans time.t1.end flag ASC
SELECT
select toll_organ_name from nettoll.a36_organ_transform where tollorganid =S1 and organ_character limit
update p17_gantry_temp_cpc set process_result $1, update_time now() where mid S2 and center_id =$3
select organ_id, tollorganid, organ_hex, toll _organ_name, other_id, default _lane_hex, default_lane_id from
nettoll.a36_organ_transform where organ_hex S1 and organ_character $2 limit ？］
7.1.2 Top10-按单条平均执行时间降序
当前WDR报告暂不支持直接按单条平均执行时间降序查看结果，需根据执行时间列表中的AvgElapse
Time(us)一列进行手动排序，当前排序后结果如下（对于在不同CN上执行的id不同但结构相同的SQL
当前已做了归并)：
SQL语句
SELECT COUNT(?) FROM (SELECT DISTINCT 108cpc. pass_id, AS media_type, 108cpc.obu_sn AS media_no.
108cpc. gantry id. 108cpc.en time As en trans time, 108cpc.trans time As trans occur time, 108cpc.vehicle color.
108cpc.vehicle_no AS vehicle license, 108cpc. vehicle _type, 108cpc. vehicle_class FROM nettoll.108 _trans gantry_cpc 108cpc
INNER JOIN nettoll.a36 organ a36 ON 108cpc. center id a36.organ id WHERE 108cpc.trans time > S1 AND
08cpc.trans _time S2 AND (108cpc. vehicle_no S3 OR 108cpc.cpu_vehicle_no S4 OR 108cpc.obu_vehicle _no S5 OR
08cpc.identify no $6)UNION SELECT DISTINCT 108etc. pass_id, AS media_type, 108etc.cpu_card_id AS media_no,
108etc. gantry id, 108etc.en time As en trans time, 108etc.trans time AS trans occur time, 108etc. vehicle color.
108etc. vehicle no As vehicle license. I08etc. vehicle type. I08etc. vehicle class FROM nettoll.108 trans gantry etc 108etc INNER JOIN nettoll. a36 _organ a36 ON 108etc. center_id a36.organ id WHERE 108etc. trans _time > S7 AND 108etc.trans time <S8
AND(I
注：本条SOL因过长统计时被截断，可通过修改 guc 参数track activity query size 增加最长记录字符数
进行解决如需修改
可联系xx工程师指导操作
select n10.gid, n10.mid, n10.split id, n10.type, n10. process_result, n10.created, p07."id", p07.message_id, p07.trans _pay_type. p07.pass_id, p07.etc_card_id as etcCardld, p07.media_type as mediaType, p07.media_no as mediaNo, po7.en toll lane id as
enTollLaneld, p07.ex_vehicle_id as exVehicleld, p07.ex_vehicle_color as exVehicleColor, pl.toll_fee as fee, pl.en_point id. pl.ex point_id, pl.en_toll_station_name, pl.ex_toll_station_name, pl.en_time, pl.ex_time from po7_clear split detail pl inner join po7 clear split info po7 on pl."id"= p07."id" inner join n10_trans splitinfo n10 on n10.gid p07.id and n10.split id pl.split id
where n10.mid = and n10.type S1 and pl.num group and p07.clear_type $2 and n10. process result $3 and
p07.ex time > to date(S4. ? order by n10. created ASC limit s5
select n10.gid, n10.mid, n10.split_id, n10.type, n10.process_result, n10.created, p07.id, p07.pass_id_group, p07.message_id.
p07.trans pay_type, p07.pass_id, p07.split_fee as fee, p07.etc_card_id as etcCardld, p07.media_type as mediaType.
p07.media _no as mediaNo, p07.en_toll_lane_id as enTollLaneld, p07.ex_vehicle_id as exVehicleld, p07.ex_vehicle _color as exVehicleColor from p07_clear_split_info p07 inner join n10_trans_splitinfo n10 on n10.gid p07.id where n10.mid = and n10.type S1 and n10.process_result $2 and p07.clear_type $3 and p07.split_rule != and p07.ex_time > to_date(S4, ?
order by n10.created ASC limit S5
select mid, gid, pass_id, trans_time, unit_id, plaza_id, shift_begin_time, lane_id, operator_id, ac_when, shift_id, issuer_id
exit_flag. prov_fee, toll_intervals group, carlicense, en_toll_lane_hex, check_result, update_time, create_time, mid_group status, amount, balance_amount, count, trans_type, pass_id_group, trade_id_group from nettoll.p19_gantry_unmerged WHERE
trans_time > to_date($1, AND trans _time now()-$2 ::interval AND status $3 limit S4
delete from nettoll. n91_entry_detail where branch_index=S1 and unit_id= $2
select distinct file_name from n10_trans_splitinfo where type $1 and process_result
select mid, gid, pass_id, trans_time, unit_id, plaza_id, shift_begin_time, lane_id, operator_id, ac_when, shift_id, issuer_id.
exit_flag, prov_fee, toll_intervals_group, carlicense, en_toll_lane_hex, check_result, update_time, create_time, mid_group status, amount, balance_amount, count, trans_type, pass_id_group, trade_id_group from nettoll. p19_gantry_unmerged WHERE
trans_time > to_date(S1, AND date_part(?,trans_time)>= S2 AND date_part(?,trans_time)< $3 AND status $4 AND
check_result $5 limit S6
SELECT ROW_NUMBER() OVER (ORDER BY min(t.trans_time) as "rowNum", t.pass_id, MIN(t.trans_time) as "beginTime". MAX(t.trans_time)as "endTime", MAX(t.end_flag)as "end_flag", MAX CASE WHEN T.end_flag then T.exit_type else end)
AS "exit_type", COUNT(case when t.end_flag=? then end) as "end_flag_num", COUNT(?) FROM(SELECT*FROM
p17_gantry_temp WHERE process_result =$1 AND trans _time >= to _timestamp($2,? )AND cast(trans _time as time) >= $3AND cast(trans_time as time)<= S4 ORDER BY trans_time ASC )t GROUP BY pass_id HAVING count(?)>? and MAX(t.trans_time)
< CURRENT_TIMESTAMP: TIMESTAMP INTERVAL LIMIT S5
select count(?)from nettoll.120_entrance_weight where check_time-interval S1 and (identify_vehicle_id $2 or vehicle_id=
$3)and en_station_id =$4
select"FROM nettoll.n11_trans_splitdetails where trans_time > to_timestamp(S1,?) and trans_time < to_timestamp(S2,?) and pass_id=any(ARRAY[S3,$4.$5,S6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,
$23,$24,$25,$26,$27,$28.$29.$30,$31,$32])
7.1.3 Top10-按执行频次降序
当前WDR报告支持按执行频次降序直接查看结果，在SQLStatistics主题下选择SQLordered by Executions,即可获得按执行频次降序排序的结果，当前夜间高峰期top10的SQL语句（对于在不同CN上执行的id不同但结构相同的SQL当前已做了归并)具体如下：
SQL语句
SELECT
select from nettoll.105_trans_exit_etc where mid=S1 and gid=$2 and pass_id=S3
START TRANSACTION
COMMIT
select toll_organ_name from nettoll.a36_organ_transform where tollorganid =$1 and organ_character limit
insert into nettoll.n93_gantry_detail mid, gid, unit_id, branch_index, exit_flag. pre_ex_mid, pre_ex_gid, real_ex_mid.
real_ex_gid, pre_fee_toll, pre_fee_unit, real_fee_toll, real_fee_unit, veh_type, vehicle_class, car_license, pass_id, transtime,注：本条SQL因过长统计时被截断，可通过修改 guc 参数track_activity_query_size增加最长记录字符数
进行解决如需修改可联系xx工程师指导操作
select(toll_rold_id ll num direction reserved num)as tolllntervalld, toll_rold_id, num, direction, reserved_num, type, length
start_lat, start_Ing, start_stake_num, end stake_num, endt_lat, endt_Ing, toll_roads, province_type, end_time, version.
operation, send_flag, created, name from a36_toll_interval_info where(toll_rold_id ll num ll direction Ilreserved_num)=$1 insert into nettoll.n91_entry_detail en_mid, en gid, unit_id, branch_index, exit_flag, pre_ex_mid, pre_ex_gid, real_ex_mid.
real_ex_gid, pre_fee_toll, pre_fee_unit, real_fee_toll, real_fee_unit, veh_type. pay_type_new, vehicle_class, car
update p17_gantry_temp_cpc set process result S1, update _time now() where mid $2 and center_id $3
select id, version, clear_type, service _provider_id, issuer_id, message_id, toll province_id, receive_time, trans_id, fee.
discount_fee, media_type, obu_sign, media_no, en_toll_lane_id, en_time, ex_toll lane_id, en_vehicle_id, en_vehicle_color, ex_vehicle_id, ex_vehicle_color, identify _vehicle _id, identify _vehicle _color, en_vehicle_type, ex_vehicle_type, vehicle_class,
en_toll_station_name, ex_toll_station_name, etc card_id, teminal trans no,trans_type_code, trans_type, terminal_no
algorithm_identifier, service_type, pay type, identification, description, special_type, vehicle_sign_id, pass_id, account_status.
disputed_reason, toll_intervals_group, charge_fee group, process_date, last_process_time, branch_shiftindex,
center_shiftindex, split_flag. create_time, dispute _result, file _id, ex_time, trans pay_type, etc_card_type, en_toll_lane_hex.
account_time, split_time, toll_support, ex_weight, axle_count, en_weight, en_axle_count, vehicle_sign, no_card_
注：本条SQL因过长统计时被截断，可通过修改 guc 参数track_activity_query_size增加最长记录字符数
进行解决如需修改可联系xx工程师指导操作
7.2集群抓取WDR报告方式及内容简介
    1.选择“监控运维>实例监控>信息采集”，进入信息采集页面。
    2.配置要采集实例的ID,采集内容和时间段。
须知
最多支持采集7天的内容。
对于是否生成 wdr报告，由“enable _wdr snapshot"控制，如果设置为“no”，则无法
生成wdr报告。
对于生成 wdr报告的时间间隔，由“wdr_snapshot_interval"控制。这两个参数可以在
实例基本信息页，参考参数配置进行参数配置。
关于对WDR报告和实例基线的约束：
    ·对于实例基线而言，选取的时间段内需要至少包含一次可用快照，才能采集到结果。
    ·对于WDR报告而言，选取的时间段内需要至少包含两次快照，且时间段应满
    ·时间段内不能有节点重启。
    ·时间段内不能有主备倒换。
    ·时间段内不能有 drop database操作。
3.单击“采集”，下发信息采集任务。下发之后可以单击刷新任务状态。
WDR报表的主要内容如下：
项目
描述
Database Stat（数据库维度性能统计信息：事务，读写，行活动，写冲突，范围）
死锁等。
Load Profile（集范集群维度的性能统计信息：CPU时间，DB时间，逻辑读/物理读/IO性能，登入登出，负载强度，负载性能表现等。 
Instance Efficiency集群级或者节点缓冲命中率。
Percentages（集群/节点范围）
Top 10 Events by Total Wait Time（节点范围）
最消耗时间的事件。
Wait Classes by Total最消耗时间的等待时间分类。
Wait Time（节点范围）
Host CPU（节点范主机范围）
主机CPU消耗
Memory Statistics
内核内存使用分布。
（节点范围）
Object stats（节点范围）
表，索引维度的性能统计信息。
Database Configuration（点
范围）
节点配置。
SQL Statistics（节点范围）
SQL语句各个维度性能统计：端到端时间，行活动，缓存命中，CPU消耗，时间消耗细分。
SQL Detail（节点范围）
SQL语句文本详情。
4.任务完成后单击任务流后的“下载”，可以分别下载“指标原数据”、“日志采集”、“慢SQL”、“WDR报告”和“实例基线”内容。
单击操作列的“删除”，可以删除任务。
结束