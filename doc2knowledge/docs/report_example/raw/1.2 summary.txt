问题局点
XX
问题系统
XXX
发生日期
2021年09月16日
问题描述
xx切yyyyy后，巡检发现00:00-02:00， DN CPU较高，约80％至90％。
问题根因
业务切到yyyyy后CPU高，主要分两方面：
1. xxxx同yyyyy CPU 监控实现方式不太一样，yyyyy含 user/system/nice/io wait等指标，所以业务情况下会显示高一些。
2.通过分析现网的统计视图，以及对比正常时间段和异常时间段的WDR报告，大概率CPU高是由于以下SQL导致：
select * FROM nettoll.n11 trans splitdetails
    where trans time > to timestamp（$1，?）
    and trans time < to timestamp（$2，?）
    and pass_id =any（ARRAY ［ $3， $4， $5， $6， $7， $8， $9, $10， $11， $12， $13， $14， $15，$16，$17，$18，$19，$20, $21，$22，$23，$24，$25，$26，$27，$28，$29，$30，$31，$32］）
定位过程
CPU高一般是由于语句进行过多的行扫描导致，所以：
    1，分析全局语句级CPU消耗过多语句，初步发现疑似语句
    2，对比CPU高和低时间段的WDR报告，大概率锁定问题语句
    3，抓取目标语句的计划，发现此表为分区表，有40个分区，此语句执行计划显示总共扫了40个分区，故查询的行扫描数量相对较多。
    4，分析SQL扫描分区数量的合理性，发现存在优化空间
影响范围
影响DN的CPU，当前P80/P95时延在可控范围内
解决方案
当前SQL的JDBC调用方式会过多的扫描表的分区，当前内核支持某些场景下的执行时分区剪枝优化，建议业务做如下修改，可以走分区剪枝优化场景：
1，修改SQL，不要使用to_timestamp函数，修改为：
select FROM n11_trans_splitdetails where trans time > and trans time < and pass id =any（ARRAY［?， ？］
2，JDBC接口侧使用如下API来设置trans_time:
stmt.setTimestamp（1， java.sql. Timestamp. valueOf（＂2021-03-12 14: 10: 10.123＂）； stmt.setTimestamp（2.java.sql.Timestamp. valueOf（＂2021-03-28 14: 10: 10.123＂））；
