4 分析过程[Problem Analysis]
4.1 运行环境CPU曲线
从上图可以发现，业务在晚12点之后，有一段时间DN所在结点的CPU较高（约80%-90%）
当前管控是定位读取/proc/stat文件来获取CPU信息，CPU使用率包含：user/nice/system/io_wait
在业务迁移至yyyyy之前，xxxx300使用FIManager进行资源监控，初步分析其CPU使用率仅包含user部分，所以监控上显示业务在xxxx300上CPU消耗较低
4.2 对比高低CPU的WDR报告
4.2.1 CPU正常区间
WDRSnapshot默认每一小时会采样并持久化性能指标数据，下图中是当前WDR对比的时间段信息：
Start Time/End Time分别表示一次 WDR Snapshot的始和束时间，对比上的CPU曲线，即当前的WDR报告可以作为CPU正常曲线的性能基线报告
【图片】
下图为集群内的TOPCPU消耗的SQL信息，红框内字段解释如下：
    CPU Time:表示Snapshot期间SQL真正费花费CPU,单位为微秒
    Calls:表次两次Snapshot期间SQL调用次数
【图片】ordered by CPU Time
4.2.2CPU高的区间
下图为CPU高时间点的WDR报告。
【图片】
下图为CPU高时间点的一小时内TOP CPU SQL信息
【图片】
对比正常和异常点的TOPCPU消耗的SQL信息，发现异常时间点，下述SQL:
select FROM nettoll.n11 trans splitdetails where trans_time > to_timestamp(S1,?) and trans_time < to_timestamp(S2.?)and pass_id =any(ARRAYS3,$4.$5.$6.$7.$8.$9,$10,$11,S12,S13,S14,$15,$16,S17,S18,$19,$20,$21,$22 $23,$24,$25,S26,$27,$28,$29,S30,$31,$32J)
    CPU消耗以及执行次数较正常多差三倍
    数据库页面逻辑读平均每次SQL执行约1283798104/10709=372183次，SQL扫描页面数量较大
4.3语句的执行信息
通过抓取一条上述SOL的执行信息，得到DN上的性能指标如下
    单语句开始和结束时间
        start time............2021-09-16.10: 43: 13.4744+08
        finish time...........2021-09-16.10: 43: 15.859482+08
    语句在DN上的执行计划
        【图片】
        因为n11_trans_splitdetails为分区表，且分区数量为40个，计划中Selected Partitions:1.40表示此SQL会涉及到40个分区扫描。
    行活动和时间信息
    n returned rows
    1.0
    n tuples fetched
    24
    n tuples returned
    14746560
    n tuples insertec
    .0
    n tuples updated
    n tuples deleted
    n blocks fetched
    -40834
    h blocks hit
    40811
    db time
    1-2385019
    cpu time
    2374395
    execution time
    2383433
    parse time
    plan time
    rewrite time
    pl execution time
    pl compilation time
    .0
    data io time
    197
    net send info
    ("time": 365.."n calls": 13.."size": 13317
    net recv info
    ("time": 0, "n calls": 0,. "size":01
    net stream send info
    ("time": 0. ."n calls": 0,."size": 0
    net stream recv info I. ("time": 0,."n calls": 0,. "size":0
    lock count
    .207
    lock time
    172
    lock wait count
    .0
    lock wait time
    lock max count
    207
    lwlock count..
    lwlock wait count
    2
    lwlock time.
    lwlock wait time
    5
    details
    is slow_sql
    f
    上图中主要字段解析如下：
        db_time-可以理解成墙上时钟时间，即接近真实的SQL消耗时间
        cpu_time-去掉内核的一些等待后的真实 CPU消耗，如锁等待会出让CPU,即等待的时间不算在内，可见此SQL的执行时间基本都花在CPU上
        n_blocks_fetched/n_blocks_hit -代表 SQL据库页面的逻辑读和命中数据，可见此 SQL扫描了数据库4万个页面，量较大
4.4SQL优化
4.4.1 优化点
当前数据库内核在分区表某些场景下，是可以进行分区执行数量的剪枝的，所以可以利用此能力，减
少分区的扫描数量，理论上会降低CPU消耗且加快SQL执行速度
对于业务SQL,
select"FROM nettoll.n11_trans splitdetails where trans time > to timestamp($1,?) and trans time < to timestamp($2,?) and pass_id =any(ARRAY[S3.S4.S5.S6.S7.$8.$9,$10,$11,S12,S13,S14,$15,S16,$17,$18,S19,$20,$21.$22
$23,$24,$25,$26,$27,$28,$29,$30.$31,$32J)
分区表的分区键是trans_time,当前无法使用此能力的原因是：分区执行剪枝的时候，表达式如果是函
数（此处的to_timestamp)或者强转，则不支持裁剪，对于常量是支持的。
4.4.2 优化细节
由于表达式中使用常量是可以支持分区表剪枝的，所以建议业务将调用方式修改为：
PreparedStatement stmt conn.prepareStatement("select FROM n11_trans_splitdetails where "
trans time >=?"+
and trans time<=?"+
and pass id =any(ARRAY[?, ?])")
stmt.setTimestamp(1, java.sql.Timestamp.valueOf("2021-03-12 14:10:10.123");
stmt.setTimestamp(2, java.sql.Timestamp.valueOf("2021-03-28 14:10:10.123");
stmt.setString(3, "011301161123030209911520210327235722");
stmt.setString(4,"020000130101720024694620210327235039");
